h1. Setting-up your preferred IDE

Working with Play is easy. You don’t even need a sophisticated IDE as Play compiles and refreshes the modifications you make to your source files automatically. So you can easily work using a simple text editor.

However, using a modern Java IDE provides cool productivity features like auto-completion, on-the-fly compilation, assisted refactoring and debugging. Play supports the "NetBeans":http://www.netbeans.org, "IntelliJ IDEA":http://www.jetbrains.com/idea/index.html and "Eclipse":http://www.eclipse.org platforms.


h2(#eclipse). <a>Generate configuration files for Eclipse</a>

Play provides a command to simplify Eclipse configuration. To transform a Play application into a working Eclipse project, use the **eclipsify** command:

bc. # play eclipsify myApp

You then need to import the application into your Workspace with the **File/Import/General/Existing project…** menu.

!images/eclipse!

The **eclipsify** command generates several launchers for the application. The main launcher in only usable with the **Run As** Eclipse command. You can then use the *Connect JPDA launcher* using *Debug As* to start a debugging session at any time. Stopping the debugging session will not stop the server.

If you make any important changes to your application, such as changing the classpath, use **eclipsify** again to regenerate the configuration files.

Additionally, an Eclipse plugin is available in your Play distribution, in the **support/eclipse/** directory. To install it, simply copy the JAR file you will find to your Eclipse installation’s **dropins** folder.

p(note). **Do not commit Eclipse configuration files when you work in a team!**

The generated configuration files contain absolute references to your framework installation. These are specific to your own installation. When you work in a team, each developer must keep his Eclipse configuration files private. 

h2(#netbeans). <a>Generate configuration files for NetBeans</a>

Play provides a command to simplify NetBeans configuration. To transform an existing application to a valid NetBeans project, use the **netbeansify** command:

bc. # play netbeansify myApp

Then you can just open the application as a NetBeans project.

!images/netbeans!

Use the standard *Run* button to start the application. When the application is started you can attach a debugging session at any time using the *Debug* button. Stopping the debugging session doesn’t stop the server.

If you make any important change to your application such as changing the classpath, use **netbeansify** again to regenerate the configuration files. 

p(note). **Do not commit the nbproject/ directory when you work in a team!**
 
The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team on the same application, each developer must keep his NetBeans configuration files private.

h2(#intellij). <a>Generate configuration files for IntelliJ IDEA</a>

Play provides a command to simplify IntelliJ IDEA configuration. To transform an existing application to a valid IntelliJ IDEA module/project, use the **idealize** command:

bc. # play idealize myApp

Then you can just import the application in IntelliJ using the import module facility.

!images/intellij!

You can use the *Run* and *Debug* using the context menu. 

p(note). **Do not commit the .iml files when you work in a team!**
 
The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team on the same application, each developer must keep his IntelliJ IDEA configuration files private.


h2(#textmate). <a>Textmate</a>

Download and install the bundle provided for "Textmate":http://macromates.com/ to enable syntax coloring and auto-completion. The bundle also eases navigation between controllers and views.

!images/editor!


h2(#custom). <a>Manually configure your preferred editor</a>

As Play applications are standard Java applications, you don’t need a specific plug-in to work with your preferred editor.  This, however, requires a little bit of knowledge of how Play works.

h3. Classpath settings

A Play application classpath is built as follows (in this order): 

* The **conf/** directory for the application
* The **$PLAY_PATH/framework/play-$version.jar**
* All JAR files found in your application’s **lib/** directory
* All JAR files found in the **$PLAY_PATH/framework/lib/** directory

p(note). *Tip*
 
If you have any modules enabled, you will need to add all modules’ libraries (from the **$module/lib/** directory) to the classpath as well.


h3. Main class to run

To start a Play application, just run the **play.server.Server** class. Play uses the **"application.path"** system property to locate the application to run. Typically you pass this value with:

bc. java -Dapplication.path="/app/path"...


h3. Java agent

To enable HotSwap reloading you have to load a Java agent packaged in the **play.jar** library. Typically like this:

bc. java -javaagent:"$PLAY_PATH/framework/play.jar" ...

It’s not required, but will speed-up class reloading when it is possible.


h2. <a>Debugging issues</a>

Play automatically reloads Java classes when the Java sources are modified. However as Java does not fully support class reloading, the JDPA debugger can easily get confused: breakpoint submission may fail or the debugger may stop on the wrong line when you step into the code.

To avoid this behavior, a better way is to start a fresh debugging session after a code modification. Luckily, JPDA supports the ability to connect and disconnect the debugger at any time without restarting the JVM.

So the correct workflow for debugging is:

# <span>Make changes to your source code.</span>
# <span>Refresh the browser to see the results. (At this time Play will reload your code modifications and redefine classes in the JVM.)</span>
# <span>If something goes wrong and you need to debug, start a new debug session.</span>
# <span>Debug and correct your code.</span>
# <span>Disconnect the debugger.</span>

By using this work-flow you will always have a debugger synchronized with the code loaded in the JVM.

p(note). Next: %(next)"‘Hello World’ tutorial":firstapp%.

h1. Sending e-mail

E-mail functionality uses the "Apache Commons Email":http://commons.apache.org/email/userguide.html library under the hood. You can use the **play.libs.Mail** utility class to send e-mail very easily.

A simple e-mail:

bc. SimpleEmail email = new SimpleEmail();
email.setFrom("sender@zenexity.fr");
email.addTo("recipient@zenexity.fr");
email.setSubject("subject");
email.setMsg("Message");
Mail.send(email); 

An HTML e-mail:

bc. HtmlEmail email = new HtmlEmail();
email.addTo("info@lunatech.com");
email.setFrom(sender@lunatech.com", "Nicolas");
email.setSubject("Test email with inline image");
// embed the image and get the content id
URL url = new URL("http://www.zenexity.fr/wp-content/themes/zenexity/images/logo.png");
String cid = email.embed(url, "Zenexity logo");
// set the html message
email.setHtmlMsg("<html>Zenexity logo - <img src=\"cid:"+cid+"\"></html>");
// set the alternative message
email.setTextMsg("Your email client does not support HTML messages, too bad :(");

For more information see the "Commons Email documentation":http://commons.apache.org/email/userguide.html.

h2. <a name="mvc">Mail and MVC integration</a>

You can also send complex, dynamic e-mail using the standard templates mechanism and syntax.

First,  define a **Mailer notifier** in your application. Your mailer notifier must subclass **play.mvc.Mailer** and be part of the **notifiers** package. 

Each public static method will be an e-mail sender, in a similar manner as actions for an MVC controller. For example:

bc. package notifiers;
 
import play.*;
import play.mvc.*;
import java.util.*;
 
public class Mails extends Mailer {
 
   public static void welcome(User user) {
      setSubject("Welcome %s", user.name);
      addRecipient(user.email);
      setFrom("Me <me@me.com>");
      EmailAttachment attachment = new EmailAttachment();
      attachment.setDescription("A pdf document");
      attachment.setPath(Play.getFile("rules.pdf").getPath());
      addAttachment(attachment);
      send(user);
   }
 
   public static void lostPassword(User user) {
      String newpassword = user.password;
      setFrom("Robot <robot@thecompany.com>");
      setSubject("Your password has been reset");
      addRecipient(user.email);
      send(user, newpassword);
   }
 
}

h3. text/html e-mail 

The **send** method call will render the **app/views/Mails/welcome.html** template as the e-mail message body.

bc. <html><body><p>Welcome <b>${user.name}</b>, </p>
...
</html>

The template for the lostPassword method could look like this:

**app/views/Mails/lostPassword.html**

bc. <html><body><head>...</head><body><img src="mycompany.com/images"/><p>Hello ${user.name},<br/>
Your new password is <b>${newpassword}</b>.
</p>
</body>
</html>

h3. text/plain e-mail

If no HTML template is defined, then a text/plain e-mail is sent using the text template.

The **send** method call will render the **app/views/Mails/welcome.txt** template as the e-mail message body.

bc. Welcome ${user.name},
...

The template for the lostPassword method could look like this:

**app/views/Mails/lostPassword.txt**

bc. Hello ${user.name},
 
Your new password is ${newpassword}.

h3. text/html e-mail with text/plain alternative

If an HTML template is defined and a text template exists, then the text template will be used as an alternative message. In our previous example, if both **app/views/Mails/lostPassword.html** and **app/views/Mails/lostPassword.txt** are defined, then the e-mail will be sent in text/html as defined in lostPassword.html with an alternative part as defined in lostPassword.txt. So you can send nice HMTL e-mail to your friends and still please those geeky friends that still use mutt ;)

h2. <a name="smtp">SMTP configuration</a>

E-mail functionality is configured in your application’s **conf/application.conf** file. First of all, you need to define the SMTP server to use:

bc. mail.smtp.host=smtp.taldius.net

If your SMTP server requires authentication, use the following properties: 

bc. mail.smtp.user=jfp
mail.smtp.pass=topsecret

h3. Channel & ports

There are two ways to send the e-mail over an encrypted channel. If your server supports the **starttls** command (see: "RFC 2487":http://www.apps.ietf.org/rfc/rfc2487.html), you can use a clear connection on port 25 that will switch to SSL/TLS. You can do so by adding this configuration option:

bc. mail.smtp.channel=starttls

Your server may also provide a SMTP-over-SSL (SMTPS) connector, that is an SSL socket listening on port 465. In that case, you tell Play to use this setup using the configuration option:

bc. mail.smtp.channel=ssl

h2. <a name="configuration">More about configuration</a>

Under the hood, Play uses JavaMail to perform the actual SMTP transactions. If you need to see what’s going on, try:

bc. mail.debug=true

When using SSL connections with JavaMail, the default SSL behavior is to drop the connection if the remote server certificate is not signed by a root certificate. This is the case in particular when using a self-signed certificate. Play’s default behavior is to skip that check. You can control this using the following property:

bc. mail.smtp.socketFactory.class

If you need to connect to servers using non-standard ports, the following property will override the defaults:

bc. mail.smtp.port=2500

h2. <a name="gmail">Using Gmail</a>

To use Gmail’s servers, use this configuration: 

bc. mail.smtp.host=smtp.gmail.com
mail.smtp.user=yourGmailLogin
mail.smtp.pass=yourGmailPassword
mail.smtp.channel=ssl


p(note). **Continuing the discussion**
 
Next: %(next)"Security guide":security%.

Index: src/main/java/org/apache/commons/javaflow/bytecode/transformation/asm/AsmClassTransformer.java
===================================================================
--- src/main/java/org/apache/commons/javaflow/bytecode/transformation/asm/AsmClassTransformer.java	(revision 1608463)
+++ src/main/java/org/apache/commons/javaflow/bytecode/transformation/asm/AsmClassTransformer.java	(working copy)
@@ -42,7 +42,32 @@
     }
 
     private byte[] transform(final ClassReader cr) {
-        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
+        final ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES) {
+          @Override protected String getCommonSuperClass(final String type1, final String type2) {
+            Class<?> c, d;
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            try {
+              c = Class.forName(type1.replace('/', '.'), false, classLoader);
+              d = Class.forName(type2.replace('/', '.'), false, classLoader);
+            } catch (Exception e) {
+              throw new RuntimeException(e.toString());
+            }
+            if (c.isAssignableFrom(d)) {
+              return type1;
+            }
+            if (d.isAssignableFrom(c)) {
+              return type2;
+            }
+            if (c.isInterface() || d.isInterface()) {
+              return "java/lang/Object";
+            } else {
+              do {
+                c = c.getSuperclass();
+              } while (!c.isAssignableFrom(d));
+              return c.getName().replace('.', '/');
+            }
+          }
+        };        
         // print bytecode before transformation
         // cr.accept(new TraceClassVisitor(new ContinuationClassAdapter(this, cw), new PrintWriter(System.out)), false);
 
